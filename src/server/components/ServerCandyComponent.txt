import { Component } from "@flamework/components";
import { OnStart } from "@flamework/core";
import { CandyComponent } from "shared/components/CandyComponent";
import { PlayerDataService } from "server/services/PlayerDataService";
import { PlayerData } from "shared/types";
@Component({ tag: "Candy" })
export class ServerCandyComponent extends CandyComponent implements OnStart {
	constructor(private readonly playerDataService: PlayerDataService) {
		super();
	}

	public onStart(): void {
		this.remotes.candyClicked.Connect((player) => {
			this.playerDataService.updatePlayerData(player, (playerData) => {
				this.processCandyClick(player, playerData);
				this.state = {
					candyLevel: playerData.candyState.candyLevel,
					pointsPerClick: playerData.candyState.pointsPerClick,
					totalClicks: playerData.candyState.totalClicks,
					lastClickTime: playerData.candyState.lastClickTime,
					playerId: player.UserId,
					clicksRemaining:
						this.calculateClicksForLevel(playerData.candyState.candyLevel + 1) -
						playerData.candyState.totalClicks,
					maxClicks: this.calculateClicksForLevel(playerData.candyState.candyLevel + 1),
				};
				return playerData;
			});
		});
	}

	public onPlayerDataLoaded(player: Player, playerData: PlayerData): void {
		this.state = {
			candyLevel: playerData.candyState.candyLevel,
			pointsPerClick: playerData.candyState.pointsPerClick,
			totalClicks: playerData.candyState.totalClicks,
			lastClickTime: playerData.candyState.lastClickTime,
			playerId: player.UserId,
			clicksRemaining:
				this.calculateClicksForLevel(playerData.candyState.candyLevel + 1) - playerData.candyState.totalClicks,
			maxClicks: this.calculateClicksForLevel(playerData.candyState.candyLevel + 1),
		};
		this.spawnCandyForPlayer(player, playerData);
	}

	private processCandyClick(player: Player, playerData: PlayerData) {
		// Add candy points based on current level
		const pointsEarned = playerData.candyState.pointsPerClick;
		playerData.candyPoints += pointsEarned;
		playerData.totalCandyPoints += pointsEarned;

		// Increment click count
		playerData.candyState.totalClicks += 1;
		playerData.totalClicks += 1;
		playerData.candyState.lastClickTime = tick();

		// Check if level up is required (max level is 6)
		const maxLevel = 6;
		if (playerData.candyState.candyLevel < maxLevel) {
			const requiredClicks = this.calculateClicksForLevel(playerData.candyState.candyLevel + 1);
			if (playerData.candyState.totalClicks >= requiredClicks) {
				// Level up!
				playerData.candyState.candyLevel += 1;
				playerData.candyState.totalClicks = 0; // Reset click count
				playerData.candyState.pointsPerClick = math.floor(playerData.candyState.pointsPerClick * 1.2); // Increase points per click

				// Send level up notification
				if (playerData.candyState.candyLevel >= maxLevel) {
					print(`Player ${player.Name} reached maximum candy level ${maxLevel}!`);
				} else {
					print(`Player ${player.Name} leveled up to candy level ${playerData.candyState.candyLevel}!`);
				}
			}
		}

		// Send updated data to client
		this.remotes.playerDataUpdated.Broadcast(playerData);
		this.remotes.candyStateUpdated.Broadcast(playerData.candyState);
		this.remotes.candyDataUpdated.Broadcast({
			level: playerData.candyState.candyLevel,
			playerId: player.UserId,
		});
	}

	private spawnCandyForPlayer(player: Player, playerData: PlayerData): void {
		// Send initial player data and candy state to client
		this.remotes.playerDataUpdated.Broadcast(playerData);
		this.remotes.candyStateUpdated.Broadcast(playerData.candyState);
		this.remotes.candyDataUpdated.Broadcast({
			level: playerData.candyState.candyLevel,
			playerId: player.UserId,
		});

		print(
			`Sent initial candy state to ${player.Name}: Level ${playerData.candyState.candyLevel}, Points per click: ${playerData.candyState.pointsPerClick}`,
		);
	}

	private calculateClicksForLevel(level: number): number {
		return math.floor(10 * math.pow(1.5, level - 1));
	}
}
